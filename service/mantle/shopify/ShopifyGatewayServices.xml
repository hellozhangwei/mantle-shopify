<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="queue" noun="ShopifyGatewayRefundSystemMessage">
        <in-parameters>
            <parameter name="paymentId"/>
            <parameter name="amount"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
        <!-- Find Order from payment -->
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="paymentToRefund">
                <field-map field-name="paymentId"/>
            </entity-find-one>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderToRefund">
                <field-map field-name="orderId" from="paymentToRefund.orderId"/>
            </entity-find-one>
            
            <!-- Find product Store for remote -->
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="ProductStore">
                <field-map field-name="productStoreId" from="orderToRefund.productStoreId"/>
            </entity-find-one>
            <entity-find entity-name="moqui.service.message.SystemMessageRemote" list="remotes">
                <econdition field-name="productStoreId" from="ProductStore.productStoreId"/>
            </entity-find>

            <if condition="remotes.size()==0">
                <return error="true" message="The product store where this payment was processed does not have a remote configured to proccess the refund"/>
            </if>
            <set field="remote" from="remotes.first()"/>

            <set field="refundReason" value="Shopify gateway refund"/>
            <set field="externalId" from="orderToRefund.externalId"/>
            <set field="moquiOrderId" from="paymentToRefund.orderId"/>
            <set field="shipping" from="[:]"/>
            <set field="shipping.full_refund" value="true"/>
            <set field="currency" from="orderToRefund.currencyUomId"/>
            <set field="refund_line_items" from="[]"/>
            <set field="transactions" from="[]"/>

            <set field="refund" from="[:]"/>

            <script>
                transaction = [:];

                transaction.parent_id = paymentToRefund.shopifyPaymentId;
                transaction.amount = amount;
                transaction.kind = "refund";
                transaction.gateway = "shopify_payments";
                transactions.add(transaction);
            </script>

            <set field="refund.currency" from="currency"/>
            <set field="refund.shipping" from="shipping"/>
            <set field="refund.refund_line_items" from="refund_line_items"/>
            <set field="refund.transactions" from="transactions"/>

            <set field="messageText" from="groovy.json.JsonOutput.toJson([refund:refund])"/>


            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage" out-map="context"
                          in-map="[systemMessageTypeId:'ShopifySystemMessageType',
                             systemMessageRemoteId: remote.systemMessageRemoteId,
                             sendNow: false,
                             messageText:messageText,
                             orderId:orderToRefund.orderId,
                             shopifyOrderId:orderToRefund.externalId,
                             docControl: 'gatewayRefund',
                             docType: 'orders/'+orderToRefund.externalId+'/refunds',
                             docSubType: 'POST']"/>

            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderToUpdate" for-update="true">
                <field-map  field-name="externalId" from="externalId" />
            </entity-find-one>
<!--            <service-call name="mantle.shopify.ApiServices.send#CreateRefundSystemMessage" in-map="context"/>-->
            <set field="orderToUpdate.shopifyOrderStatusId"  value="OrderCancelled"/>
            <entity-update value-field="orderToUpdate"/>
        </actions>
    </service>

</services>
