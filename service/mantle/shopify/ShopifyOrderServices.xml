<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
	<!-- 
        Endpoint to pull down orders from Shopify.

        https://{store_name}.myshopify.com/admin/api/2023-04/orders.json?limit={limit}&fulfillment_status={status}&since_id={order_id}
    -->
    <service verb="download" noun="ShopifyOrders">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="fulfillmentStatus" default-value="unfulfilled"/>
            <parameter name="limit" default-value="250"/>
        </in-parameters>
        <out-parameters>
            <parameter name="systemMessageId"/>
        </out-parameters>
        <actions>
            <script>import groovy.json.JsonSlurper</script>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote">
                <field-map field-name="systemMessageTypeId" value="ShopifySystemMessageType"/>
                <field-map field-name="systemMessageRemoteId"/>
            </entity-find-one>

            <if condition="!remote"><return error="true" message="No Remote of type 'ShopifySystemMessageType' found for ID ${systemMessageRemoteId}"/></if>

            <!-- see if we have called this before and what was the last order found on previous message -->
            <entity-find entity-name="moqui.service.message.SystemMessage" limit="1" list="prevMessages">
                <econdition field-name="systemMessageTypeId" value='ShopifySystemMessageType'/>
                <econdition field-name="systemMessageRemoteId"/>
                <econdition field-name="docType" value="orderList"/>
                <order-by field-name="initDate"/>
            </entity-find>
            <set field="lastOrderId" from="prevMessages ? prevMessages.first().docControl : null"/>

            <!-- https://{hostname}/admin/api/{version}/{resource}.json?limit=250&fulfillment_status=unfulfilled&since_id={last} -->
            <script><![CDATA[
                String url = ec.resource.expand(remote.sendUrl, "", [resource:"orders"]) +
                    "?limit=${limit}&fulfillment_status=${fulfillmentStatus}";

                if (lastOrderId != null) {
                    url += "&since_id=${lastOrderId}";
                }

                org.moqui.util.RestClient restClient = ec.service.rest().method("GET")
                    .addHeader("Content-Type", "application/json")
                    .basicAuth(remote.username, remote.password)
                    .uri(url);

                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()

                if (restResponse.statusCode != 200) {
                    ec.logger.error("Shopify Orders API Response ${restResponse.statusCode} ${restResponse.reasonPhrase}: ${restResponse.text()} for url: ${url}")
                    return
                }
                Map messageMap = new JsonSlurper().parseText(restResponse.text());
                lastOrderId = messageMap.orders ? messageMap.orders.last().id : null;
            ]]></script>

            <if condition="lastOrderId">
                <service-call name="create#moqui.service.message.SystemMessage" out-map="context" in-map="[
                    systemMessageTypeId:'ShopifySystemMessageType', systemMessageRemoteId:systemMessageRemoteId,
                    messageText:restResponse.text(), docType:'orders', docControl:lastOrderId,
                    isOutgoing:'N', initDate:ec.user.nowTimestamp, statusId:'SmsgReceived']"/>
            </if>
        </actions>
    </service>


    <!-- consume the list of orders and generate individual system messages -->
    <service verb="consume" noun="OrderListSystemMessage">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <script>
                import groovy.json.JsonSlurper;
                import groovy.json.JsonOutput;
            </script>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <set field="messageMap" from="new JsonSlurper().parseText(systemMessage.messageText)"/>

             <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote">
                <field-map field-name="systemMessageTypeId" value="ShopifySystemMessageType"/>
                <field-map field-name="systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/>
            </entity-find-one>

            <iterate list="messageMap.orders" entry="order">
                <script><![CDATA[
                    String url = ec.resource.expand(remote.sendUrl, "", [resource: "${order.id}/fulfillment_orders"]);
                    org.moqui.util.RestClient.RestResponse restResponse = ec.service.rest().method("GET")
                        .addHeader("Content-Type", "application/json").basicAuth(remote.username, remote.password).uri(url).call();

                    if (restResponse.statusCode != 200) {
                        ec.message.addError("Shopify Orders API Response ${restResponse.statusCode} ${restResponse.reasonPhrase}: ${restResponse.text()}")
                    } else {
                    	Map responseMap = new JsonSlurper().parseText(restResponse.text());
                    }
                ]]></script>

                <service-call name="create#moqui.service.message.SystemMessage" out-map="context"
                                in-map="[systemMessageTypeId:'ShopifySystemMessageType', 
                                parentMessageId: systemMessage.systemMessageId,
                                messageText:JsonOutput.toJson([order:order, fulfillments:responseMap]), docType:'order', 
                                isOutgoing:'N', initDate:ec.user.nowTimestamp, statusId:'SmsgReceived']"/>

                <!-- immediately try to consume the order message -->
                <service-call name="org.moqui.impl.SystemMessageServices.consume#ReceivedSystemMessage"
                    in-map="[systemMessageId:systemMessageId, allowError:false]" async="true"/>
            </iterate>
        </actions>
    </service>

    <!-- consume order-->
    <service verb="consume" noun="OrderSystemMessage">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage" for-update="true"/>

            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote">
                <field-map field-name="systemMessageTypeId" from="systemMessage.systemMessageTypeId"/>
            </entity-find-one>

            <set field="messageMap" from="new groovy.json.JsonSlurper().parseText(systemMessage.messageText)"/>

            <service-call name="mantle.shopify.ApiServices.consume#ShopifyOrderMap"
                    in-map="[order:messageMap.order, productStoreId:systemMessageRemote.productStoreId]" out-map="context"/>

            <!-- not sure what to do with orders that are missing the fulfillment message -->
            <if condition="messageMap.fulfillments">
            	<service-call name="mantle.shopify.ApiServices.consume#ShopifyFulfillmentsMap"
                    in-map="[fulfillments:messageMap.fulfillments, orderId:orderId]"/>
            </if>

            <set field="systemMessage.orderId" from="orderId"/>
            <entity-update value-field="systemMessage"/>
        </actions>
    </service>

    <!-- fulfill order -->
    <service verb="queue" noun="ShopifyFulfillmentSystemMessage" authenticate="anonymous-all">
        <description>Creates a system message for sending to shopify that decribes orders fulfilled in a shipment</description>
        <in-parameters>
            <parameter name="shipmentId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" />
            <if condition="!shipment"><return error="true" message="No shipment found with ID ${shipmentId}"/></if>
            <if condition="!shipment.statusId in ['ShipShipped','ShipDelivered']">
                <return error="true" message="ERROR:The shipment ${shipment.shipmentId} must be in status Shipped or Delivered for registering a fulfillment "/>
            </if>

            <set field="tracking_info" from="[:]"/>
            <entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList">
                <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId,shipmentPackageSeqId"/></entity-find>
            <if condition="packageRouteSegList">
                <set field="tracking_info.number" from="packageRouteSegList.first().trackingCode"/>
            </if>

            <!-- get the carrierPartyId from the first ShipmentRouteSegment -->
            <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="shipmentRouteSegmentList">
                <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find>
            <set field="carrierPartyId" from="shipmentRouteSegmentList ? shipmentRouteSegmentList.first().carrierPartyId : null"/>

            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="carrierShopifyId">
                <field-map field-name="partyId" from="carrierPartyId"/><field-map field-name="partyIdTypeEnumId" value="PtidShopify"/>
            </entity-find-one>
            <if condition="carrierShopifyId">
                <set field="tracking_info.company" from="carrierShopifyId.idValue"/>
            </if>

            <!-- get all the shopify fulfillment orders from this shipment -->
            <set field="orderIdList" from="shipmentItemSourceList.orderId.unique( false )"/>
            <entity-find entity-name="mantle.shopify.ShopifyFulfillmentOrder" list="fulfillmentOrders">
                <econdition field-name="orderId" operator="in" from="orderIdList"/></entity-find>

            <entity-find entity-name="mantle.shipment.ShipmentItemSourceOrderItem" list="shipmentOrderItemList">
                <econdition field-name="shipmentId"/></entity-find>
            <set field="line_items_by_fulfillment_order" from="[]"/>
            <iterate list="fulfillmentOrders" entry="fulfillmentOrder">

                <!-- get all the shipped line items from this fulfillment order -->
                <set field="fulfillmentOrderLineItems" from="shipmentOrderItemList.findAll({it.orderId == fulfillmentOrder.orderId})"/>
                <set field="line_items" from="[]"/>
                <iterate list="shipmentOrderItemList" entry="shipmentOrderItems">
                    <set field="item" from="[:]"/>
                    <set field="item.id" from="shipmentOrderItems.fulfillmentOrderLineItemId"/>
                    <set field="item.quantity" from="shipmentOrderItems.quantityPicked"/>
                    <set field="line_items" from="line_items.plus(item)"/>
                </iterate>
                <set field="fulfillment_order" from="[:]"/>
                <set field="fulfillment_order.fulfillment_order_id" from="fulfillmentOrder.fulfillmentOrderId"/>
                <set field="fulfillment_order.fulfillment_order_line_items" from="line_items"/>

                <set field="line_items_by_fulfillment_order" from="line_items_by_fulfillment_order.plus(fulfillment_order)"/>
            </iterate>

            <set field="fulfillment" from="[:]"/>
            <set field="fulfillment.message" from="shipment.handlingInstructions"/>
            <set field="fulfillment.notify_customer" from="false"/>
            <set field="fulfillment.tracking_info" from="tracking_info"/>
            <set field="fulfillment.line_items_by_fulfillment_order" from="line_items_by_fulfillment_order"/>

            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage" out-map="context"
                in-map="[systemMessageTypeId:'ShopifySystemMessageType', messageText:JsonOutput.toJson(fulfillment), docType:'fulfillments']"/>
        </actions>
    </service>


    <!-- cancelOrder -->

</services>